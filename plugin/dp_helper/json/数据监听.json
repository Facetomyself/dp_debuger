
[
    {
    "序号":"1",
    "方法名": "start()",
    "说明": "此方法用于启动监听器，启动同时可设置获取的目标特征。可设置多个特征，符合条件的数据包会被获取。如果监听未停止时调用这个方法，可清除已抓取的队列。",
    "示例": "tab.listen.start('gitee.com/explore')"
    },
    {
    "序号":"2",
    "方法名": "set_targets()",
    "说明": "此方法可在监听过程中修改监听目标，也可在监听开始前设置。如监听未启动，不会启动监听。",
    "示例": "无（文档未明确给出单独示例代码）"
    },
    {
    "序号":"3",
    "方法名": "wait()",
    "说明": "此方法用于等待符合要求的数据包到达指定数量。所有符合条件的数据包都会存储到队列，wait()实际上是逐个从队列中取结果，不用担心页面已刷走而丢包。",
    "示例": "res = tab.listen.wait()"
    },
    {
    "序号":"4",
    "方法名": "steps()",
    "说明": "此方法返回一个可迭代对象，用于for循环，每次循环可从中获取到的数据包。可实现实时获取并返回数据包。如果timeout超时，会中断循环。",
    "示例": "for packet in tab.listen.steps(): print(packet.url)"
    },
    {
    "序号":"5",
    "方法名": "wait_silent()",
    "说明": "此方法用于等待所有指定的请求完成。",
    "示例": "无（文档未明确给出单独示例代码）"
    },
    {
    "序号":"6",
    "方法名": "pause()",
    "说明": "此方法用于暂停监听。",
    "示例": "无（文档未明确给出单独示例代码）"
    },
    {
    "序号":"7",
    "方法名": "resume()",
    "说明": "此方法用于继续暂停的监听。",
    "示例": "无（文档未明确给出单独示例代码）"
    },
    {
    "序号":"8",
    "方法名": "stop()",
    "说明": "此方法用于终止监听器的运行，会清空已获取的队列，不清空targets。",
    "示例": "无（文档未明确给出单独示例代码）"
    },
    {
    "序号":"9",
    "方法名": "wait_extra_info()",
    "说明": "有些数据包有extra_info数据，但这些数据可能会迟于数据包返回，用这个方法可以等待这些数据加载到数据包对象。",
    "示例": "无（文档未明确给出单独示例代码）"
    }
    ]